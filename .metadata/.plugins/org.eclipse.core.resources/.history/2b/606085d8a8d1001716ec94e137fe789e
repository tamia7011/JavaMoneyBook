package Database;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Iterator;
import java.util.PriorityQueue;

import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import java.util.Arrays;

import Constants.Constants;
import Moneybook.MainFrame;
import Moneybook.calendar.CalendarManager;

public class AccountManager {

	
	private static AccountManager dataManager;
	private Account selectedData;
	private ArrayList<Account> DataList;//Money Data List
	DataPriority comparator;
	PriorityQueue<Account> priorityQueue;
	AccountDAO dac;
	int score;
	private AccountDAO accountDAO;

	public static AccountManager getInstance() {
		if(dataManager == null) {
			dataManager = new AccountManager();
			return dataManager;
		}
		return dataManager;
	}
	
	private AccountManager() {
		init();
	}
	
	private void init() {
		comparator = new DataPriority();
		priorityQueue = new PriorityQueue<Account>(10, comparator);
		score = 0;
	}
	
	public void setCurrentData(String date) {
		for(Account data : DataList) {
			if(data.getDate().equals(date)) {
				selectedData = data;
				return;
			}
		}
		selectedData = null;
	}
	
	// calculating scores
	public int getScore(Account data) {
		int priceScore = data.getPrice() / 1000;
		int typeScore;

		String type= data.getType(); 
		
		if (type == Constants.expenseType.Fixed.toString()){
			typeScore = 1000;
		}
		else if (type ==  Constants.expenseType.Flexible.toString()) {
			typeScore = 700;
		}
		else if (type == Constants.expenseType.Waste.toString()){
			typeScore = 0;
		}		
		//TODO: NOT IMPLEMNETED.
		return score; 
	}
	
	
	public class DataPriority implements Comparator<Object> {

		@Override
		public int compare(Object data1, Object data2) {
			
			Account dataA = (Account)data1;
			Account dataB = (Account)data2;
			
			return Integer.compare(getScore(dataA), getScore(dataB));
		}
		
	}
	
	
	public void AddToPriorityQueue(ArrayList<Account> arraylist) {
		//add data to priority queue
		Iterator<Account> it = arraylist.iterator();
		while (it.hasNext()){
			priorityQueue.add((Account) it.next());
		}
	}
	
	public Account poll(int num){
		priorityQueue.comparator()
	}
}
